@page
@model graphScanVisualizer.Pages.InfoPreOrderModel
@{
}

<!--Dropdown button followed by short article on Pre-order traversal with images, graphics linked to by https and links to appropraites pages and websites-->
<body>
    <div class="dropdown" id="algorithmDropdown">
        <link rel="stylesheet" href="~/css/InfoAlgorithmDropdown.css" />

        <div class="dropdown">
            <button class="dropbtn">Select Algorithm</button>
            <div class="dropdown-content">
                <a asp-page="/InfoPreOrder">PRE-ORDER SEARCH</a>
                <a asp-page="/InfoInOrder">IN-ORDER SEARCH</a>
                <a asp-page="/InfoPostOrder">POST-ORDER SEARCH</a>
                <a asp-page="/InfoBreadthOrder">BREADTH-FIRST SEARCH</a>
            </div>
        </div>

    </div>

    <h1 style="margin-top: 20px">Pre-Order Traversal</h1>
    <p style="margin-top:10px; font-size:20px;">
        The Pre-Order Search algorithm is a Depth-First tree traversal algorithm that processess each node as it traverses the tree structure(learn more about the tree data structure <a asp-page="/TreeDataStructure">here</a>).
        The algorithm's goal is to reach the bottom of each 'branch' of the tree structure, prioritizing left branches first, while processing each node it passes by.
        This is achieved using <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> as we can see from the following flow diagram. If you're not familiar with recursion you may want
        to read up on it before trying to learn these algorithms.
    </p>

    <img style="display:block; margin-left:auto; margin-right:auto; width:55%;" class="center" src="~/Graphics/PreOrderFlowDiagram.png" />
    <p style="text-align:center;">Image courtesy of Purnima Gupta from <a href="https://levelup.gitconnected.com/how-to-traverse-a-tree-using-javascript-c9a79826e819">gitconnected.com</a></p>

    <p style="margin-top:10px; font-size:20px;">
        The blue circle above calls the preOrder() function passing the root node to the function shown inside the big rectangle. The first box contains the function call
        then a print node value yellow diamond immediately after. This is why it is called pre-order; the node is printed (or processessed) before looking at any other node in the tree.
        Note that, although this diagram simply prints the value at the current node, it is also possible to process the node in some other way. For example, you may be looking for specific data
        and by 'processing' the node you could search that node for said data.
    </p>
    <p style="font-size:20px;">
        After processing the node, the algorithm then checks if there is a node to the left of the current node. If there is a node there, it will pass this node to the preOrder() function, calling it
        recursively. That's why it is called a depth-first traversal algorithm; the tree will be traversed as deep as possible on the left branch before moving to a right branch. Let's take a look at the flow diagram again,
        notice that the function will be continuously called until there is no node to the left of the current node. As this happens, it will create what is called a <a href="https://en.wikipedia.org/wiki/Call_stack">call stack</a>.
        Call stacks are how the program will remember where to return to once it reaches the end of the left most branch. Once
        the program doesn't find a node to the left, it will check if there is a node to the right. If there is no node to the right, it will move back up to the previous node and check if there is a node to
        the right of that one.
    </p>

    <p style="margin-top:10px; font-size:20px;">The psuedo-code for the preOrder() function is below</p>
    <p style="margin-top:10px; font-size:20px;">
        <b>main</b> { <br />
        &emsp; preOrder(root.node)<br />
        }<br />

        <b>preOrder</b>(node) {<br />
        &emsp; process(node)<br />
        &emsp;if (node.left exists)<br />
        &emsp; &emsp; preOrder(node.left)<br />
        &emsp;if (node.right exists)<br />
        &emsp;&emsp; preOrder(node.right)<br />
        }<br />
    </p>

    <p style="margin-top:10px; font-size:20px;">
        Now that we sort of understand how the program will work, let's go through the graphic below to visualize how the algorithm works on a concrete example.
    </p>

    <img style="display:block; margin-left:auto; margin-right:auto;" class="center"
         src="https://miro.medium.com/max/500/0*PaTE01wN4ToA40Co.gif" srcset="https://miro.medium.com/max/276/0*PaTE01wN4ToA40Co.gif 276w, https://miro.medium.com/max/500/0*PaTE01wN4ToA40Co.gif 500w" sizes="500px" />
    <p style="text-align:center;">Image courtesy of Purnima Gupta from <a href="https://levelup.gitconnected.com/how-to-traverse-a-tree-using-javascript-c9a79826e819">gitconnected.com</a></p>

    <p style="margin-top:10px; font-size:20px;">
        In this graphic the root node is 20 and, as is the case with most tree traversal algorithms, we start at the root node. The program processes 20, then checks if there is a node on the left, and there is: 15.
        It will then process 15, store 20 in the call stack, and check if there is a node on the left: 13. Then we move to and process 13 and store 15 in the call stack.
        Then we run into the first time where there is no node to the left so it will check if there is a node to the right but, uh oh, there is no node there either.
        What does the program do now? Well it looks at the most recent entry in the call stack, returns to this function and pops(deletes) it from the call stack.
        In this case it would return to the function for the node 15; and recall here that the function has already done the first two steps in the function
        (i.e processing the node value and checking/calling the left subtree/branch).
        It will move to the next step, which is checking if a right node of 15 exists: 18. The algorithm will then process node 18, store 15 in the call stack, check if there is a node to the left: no, check if there
        is a node to the right: no, so, it will return to 15. But what happens now? 15 has completed all its steps, so it will simply return to the most recent entry to the call stack: 20. Again in the function for processing node 20,
        we are at the step where we check if there is a node to the right: 25. 25 is then processed, 20 is stored in the call stack, no node to the left, node to the right: 30.
        30 is processed, 25 is stored in the call stack, no node to the left, no node to the right so it returns to 25 and pops 25 from the call stack. 25 is also done so it returns to 20, pops 20 from the call
        stack. Now the call stack is empty, and there are no more functions to call so we are done; we have traversed the entire tree.

    </p>

    <p style="margin-top:20px; font-size:20px;">
        That's it, now you're ready to test your knowledge on the <a asp-page="/index">visualizer</a>! See if you know where the algorithm will go next before it shows you.
    </p>
</body>